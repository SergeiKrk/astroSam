---
import type { CollectionEntry } from 'astro:content'
import BaseLayout from '@/layouts/BaseLayout'
import Tag from '@/components/Tag'
import type { MarkdownHeading } from 'astro'
import { Image } from 'astro:assets'
import { fade } from 'astro:transitions'

type Props = {
	id: CollectionEntry<'blog'>['id']
	data: CollectionEntry<'blog'>['data']
	headings: MarkdownHeading[]
}

const { data } = Astro.props
const { title, h1, description, pubDate, heroImage, tags, ingr } = data

const articleDate = pubDate.toISOString()
---

<BaseLayout
	title={title}
	description={description}
	image={heroImage?.src}
	articleDate={articleDate}
>
	<article class='min-w-full md:py-4 sm:max-w-none md:max-w-none mt-16 md:mt-12'>
		<div class='mb-3 flex xl:flex-row flex-col gap-6'>
			<div class='xl:basis-1/3 top-[65px] xl:sticky self-start'>
				{
					heroImage && (
						<div class='transition relative rounded-2xl overflow-hidden mx-4 my-4'>
							<Image
								transition:animate={fade({ duration: '1.5s' })}
								src={heroImage}
								transition:name={`img${title}`}
								width={1000}
								height={500}
								quality={100}
								format='webp'
								loading='eager'
								quality='high'
								class='w-full max-h-[300px] md:max-h-[500px] object-cover'
								alt={`img of ${title}`}
							/>
							<div class='absolute inset-0 bg-black bg-opacity-30 flex flex-col p-4 justify-center'>
								<h1 transition:animate='slide' class='text-white text-2xl lg:text-4xl font-bold'>
									{h1}
								</h1>
							</div>
						</div>
					)
				}
				<div class='mx-4 my-4'>
					<div
						class='grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-2 2xl:grid-cols-3 gap-2'
					>
						{
							ingr &&
								ingr.map((ingred) => (
									<div class='relative rounded-2xl overflow-hidden'>
										<Image
											client:load
											src={ingred.ingrImage}
											format='avif'
											quality={80}
											width={300}
											height={200}
											class='h-full object-cover'
											alt={`img ofgg ${title}`}
										/>
										<div class='absolute inset-0 bg-black bg-opacity-50 flex flex-col p-4 justify-center'>
											<div class='stat-title text-white'>{ingred.name}</div>
											<div class='stat-value text-accent text-[18px] xl:text-[20px] 2xl:text-[25px]'>
												{ingred.mass} {ingred.value}
											</div>
											{ingred.info && (
												<div class='stat-desc text-white'>
													где взять ингредиент{' '}
													<a href={ingred.info}>
														<span class='rounded-full border-2 border-accent px-[7px] py-[2px] m-1'>
															<b>?</b>
														</span>
													</a>
												</div>
											)}
										</div>
									</div>
								))
						}
					</div>
					<div class='mt-8'>
						<div class='text-2xl font-bold'>Другие рецепты содержащие:</div>
						<div class='mt-4 flex flex-wrap items-center gap-2 gap-y-4 md:gap-2'>
							{tags.map((tag) => <Tag tag={tag} />)}
						</div>
					</div>
				</div>
			</div>
			<div class='flex flex-col gap-2'>
				<div class='mx-4'>
					<slot />
				</div>
			</div>
			<div class='flex flex-col gap-2 top-[25px]'>
				<div class='sticky top-24 self-start block transition-all duration-200 w-[250px]'>
					<a target='blank' href='https://my.saleads.pro/s/szazr?erid=2VtzqxUquX3'
						><img src='https://my.saleads.pro/b/7ff5f4a0-0503-11ee-982e-a7e21c0190d4/img.jpg' /></a
					>
				</div>
			</div>
		</div>
	</article>
	<div class='relative flex overflow-x-hidden'>
		<div class='py-12 animate-marquee whitespace-nowrap'>
			<span class='text-4xl mx-4'>Marquee Item 1</span>
			<span class='text-4xl mx-4'>Marquee Item 2</span>
			<span class='text-4xl mx-4'>Marquee Item 3</span>
			<span class='text-4xl mx-4'>Marquee Item 4</span>
			<span class='text-4xl mx-4'>Marquee Item 5</span>
		</div>

		<div class='absolute top-0 py-12 animate-marquee2 whitespace-nowrap'>
			<span class='text-4xl mx-4'>Marquee Item 11</span>
			<span class='text-4xl mx-4'>Marquee Item 12</span>
			<span class='text-4xl mx-4'>Marquee Item 13</span>
			<span class='text-4xl mx-4'>Marquee Item 14</span>
			<span class='text-4xl mx-4'>Marquee Item 15</span>
		</div>
	</div>
</BaseLayout>

<script>
	const fnObserver = () => {
		function handleIntersection(
			entries: IntersectionObserverEntry[],
			observer: IntersectionObserver
		) {
			entries.forEach((entry) => {
				const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

				if (entry.isIntersecting) {
					index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
					index?.classList.add(
						'bg-teal-400',
						'dark:bg-teal-700',
						'text-black',
						'font-bold',
						'transition-colors',
						'border-l-8',
						'border-teal-800',
						'duration-200'
					)
				} else {
					index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
					index?.classList.remove(
						'bg-teal-400',
						'dark:bg-teal-700',
						'text-black',
						'font-bold',
						'transition-colors',
						'border-l-8',
						'border-teal-800',
						'duration-200'
					)
				}
			})
		}

		const headings = document.querySelectorAll(
			'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
		)

		const options = {
			root: null,
			rootMargin: ' 15% 0px 0% 0px ',
			threshold: 1
		}

		const observer = new IntersectionObserver(handleIntersection, options)

		headings.forEach((heading) => {
			observer.observe(heading)
		})
	}
	fnObserver()
	document.addEventListener('astro:after-swap', fnObserver)
</script>
