---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate'
import BaseLayout from '@/layouts/BaseLayout'
import Tag from '@/components/Tag'
import type { MarkdownHeading } from 'astro'
import { Image } from 'astro:assets'
import { fade } from 'astro:transitions'

type Props = {
	id: CollectionEntry<'blog'>['id']
	data: CollectionEntry<'blog'>['data']
	headings: MarkdownHeading[]
	readTime: string
}

const { data } = Astro.props
const { title, description, pubDate, heroImage, tags } = data

const articleDate = pubDate.toISOString()
---

<BaseLayout
	title={title}
	description={description}
	image={heroImage?.src}
	articleDate={articleDate}
>
	<article class='min-w-full md:py-4 sm:max-w-none md:max-w-none mt-12'>
		<div class='mb-3 flex lg:flex-row flex-col gap-6'>
			<div class='basis-1/3 top-16 sticky self-start'>
				{
					heroImage && (
						<Image
							transition:animate={fade({ duration: '1.5s' })}
							src={heroImage}
							width={1000}
							height={500}
							quality={100}
							format='webp'
							loading='eager'
							quality='high'
							class='w-full max-h-[300px]  md:max-h-[500px]  object-cover'
							alt={`img of ${title}`}
						/>
					)
				}

				<div class='stats shadow mx-2 mt-4'>
					<div class='stat'>
						<div class='stat-figure text-secondary'>
							<div class='avatar'>
								<div class='w-[72px] rounded-full border-dotted border-accent border-4'>
									<img
										src='https://m.dom-eda.com/uploads/images/catalog/item/68a49f31ca/96b9ee2514_1000.jpg'
									/>
								</div>
							</div>
						</div>
						<div class='stat-title'>Листьев эстрагона</div>
						<div class='stat-value text-accent'>20 г.</div>
						<div class='stat-desc'>
							где взять ингредиент <span
								class='rounded-full border-2 border-accent px-[7px] py-[2px] m-1'><b>?</b></span
							>
						</div>
					</div>
				</div><!-- related posts -->
			</div>
			<div class='flex flex-col gap-2'>
				<h1
					transition:animate='slide'
					class='text-center text-4xl md:text-4xl md:pb-2.5 font-semibold'
				>
					{title}
				</h1>
				<div class='flex flex-wrap justify-center items-center gap-2 gap-y-4 md:gap-5'>
					{tags.map((tag) => <Tag tag={tag} />)}
				</div>
				<div>
					<slot />
				</div>
			</div>
		</div>
	</article>
</BaseLayout>

<script>
	const fnObserver = () => {
		function handleIntersection(
			entries: IntersectionObserverEntry[],
			observer: IntersectionObserver
		) {
			entries.forEach((entry) => {
				const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

				if (entry.isIntersecting) {
					index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
					index?.classList.add(
						'bg-indigo-400',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				} else {
					index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
					index?.classList.remove(
						'bg-indigo-400',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				}
			})
		}

		const headings = document.querySelectorAll(
			'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
		)

		const options = {
			root: null,
			rootMargin: ' 15% 0px 0% 0px ',
			threshold: 1
		}

		const observer = new IntersectionObserver(handleIntersection, options)

		headings.forEach((heading) => {
			observer.observe(heading)
		})
	}
	fnObserver()
	document.addEventListener('astro:after-swap', fnObserver)
</script>
